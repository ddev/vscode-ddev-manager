{
  "name": "ddev-manager",
  "displayName": "DDEV Manager",
  "description": "DDEV Manager offers a centralized and user-friendly interface to control every aspect of your DDEV projects.",
  "version": "2.5.0",
  "publisher": "biati",
  "author": {
    "name": "Biati Digital",
    "url": "https://www.biati.com.mx"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "ddev",
    "development",
    "local",
    "docker",
    "colima",
    "manager",
    "explorer",
    "deploy"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onCommand:workbench.action.tasks.runTask"
  ],
  "icon": "assets/icon.png",
  "galleryBanner": {
    "color": "#EFF1F3",
    "theme": "light"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ddev/vscode-ddev-manager.git"
  },
  "bugs": {
    "url": "https://github.com/ddev/vscode-ddev-manager/issues"
  },
  "license": "Apache-2.0",
  "main": "./dist/extension.js",
  "contributes": {
    "viewsWelcome": [
      {
        "view": "biatiddev",
        "contents": "Connecting to DDEV...\nTo learn more about how to use DDEV [read the docs](https://ddev.readthedocs.io).",
        "when": "ddev:isConnecting && !ddev:isRunning"
      },
      {
        "view": "biatiddev",
        "contents": "DDEV not found. DDEV must be installed to use this extension.\n[Install DDEV](command:biatiddev.docsInstall)\nTo learn more about how to use DDEV [read the docs](https://ddev.readthedocs.io).",
        "when": "ddev:notFound"
      },
      {
        "view": "biatiddev",
        "contents": "Could not connect to a docker provider. Start or install a docker provider.\n[Starting Docker...](command:biatiddev.void)\nTo learn more about how to use DDEV [read the docs](https://ddev.readthedocs.io).",
        "when": "ddev:dockerStarting && ddev:dockerNotRunning"
      },
      {
        "view": "biatiddev",
        "contents": "Could not connect to a docker provider. Start or install a docker provider.\n[Start Docker Provider](command:biatiddev.startDockerProvider)\nTo learn more about how to use DDEV [read the docs](https://ddev.readthedocs.io).",
        "when": "ddev:dockerNotRunning && !ddev:dockerStarting"
      },
      {
        "view": "biatiddev",
        "contents": "DDEV is ready and running. Start by adding your first project.\n[Add Project](command:biatiddev.addProject)\nTo learn more about how to use DDEV [read the docs](https://ddev.readthedocs.io).",
        "when": "ddev:isRunningEmpty"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "biatiddev",
          "title": "DDEV Manager",
          "icon": "assets/ddev-logo.svg"
        }
      ]
    },
    "views": {
      "biatiddev": [
        {
          "id": "biatiddev",
          "icon": "assets/ddev-logo.svg",
          "name": "DDEV Manager"
        }
      ]
    },
    "submenus": [
      {
        "icon": "$(more)",
        "label": "Project Options",
        "id": "project_submenu"
      }
    ],
    "commands": [
      {
        "command": "biatiddev.emptyExtensionCache",
        "title": "Empty Extension Cache",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.start",
        "title": "Start",
        "category": "DDEV",
        "icon": "$(debug-start)",
        "icon_": {
          "dark": "assets/play.svg",
          "light": "assets/play.svg"
        }
      },
      {
        "command": "biatiddev.stop",
        "title": "Stop",
        "category": "DDEV",
        "icon": "$(debug-stop)",
        "icon_": {
          "dark": "assets/stop.svg",
          "light": "assets/stop.svg"
        }
      },
      {
        "command": "biatiddev.stopOthers",
        "title": "Stop Others",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.restart",
        "title": "Restart",
        "category": "DDEV",
        "icon": "$(refresh)"
      },
      {
        "command": "biatiddev.poweroff",
        "title": "Power Off",
        "category": "DDEV",
        "icon": "$(debug-stop)"
      },
      {
        "command": "biatiddev.delete",
        "title": "Delete Project",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.addProject",
        "title": "Add New Project",
        "category": "DDEV",
        "icon": "$(plus)"
      },
      {
        "command": "biatiddev.launchInBrowser",
        "title": "Open Project in Browser",
        "category": "DDEV",
        "icon": "$(globe)"
      },
      {
        "command": "biatiddev.launchMail",
        "title": "Open Mail",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.launchPHPMyAdmin",
        "title": "Open phpMyAdmin",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.launchDBManager",
        "title": "Open Database Administration",
        "category": "DDEV",
        "icon": "$(link-external)"
      },
      {
        "command": "biatiddev.launchDBExternally",
        "title": "Open Database with...",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.openConfigFile",
        "title": "Configure",
        "category": "DDEV",
        "icon": "$(pencil)"
      },
      {
        "command": "biatiddev.rename",
        "title": "Rename",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.openProjectInEditor",
        "title": "Open in Current Window",
        "category": "DDEV",
        "icon": "$(empty-window)"
      },
      {
        "command": "biatiddev.openProjectInNewEditor",
        "title": "Open in New Window",
        "category": "DDEV",
        "icon": "$(empty-window)"
      },
      {
        "command": "biatiddev.revealInOS",
        "title": "Reveal Project Folder",
        "category": "DDEV",
        "icon": "$(link-external)"
      },
      {
        "command": "biatiddev.createSnapshot",
        "title": "Create Snapshot",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.restoreSnapshot",
        "title": "Restore Snapshot",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.clearSnapshots",
        "title": "Clear All Snapshot",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.importDatabase",
        "title": "Import Database",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.exportDatabase",
        "title": "Export Database",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.editService",
        "icon": "$(pencil)",
        "title": "Change Version",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.editServerType",
        "title": "Change Server Type",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.editPHPVersion",
        "title": "Change PHP Version",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.editNginxConfFull",
        "title": "Edit nginx.conf file",
        "icon": "$(go-to-file)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.editPHPINI",
        "title": "Edit php.ini file",
        "icon": "$(go-to-file)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.editNodeJSVersion",
        "title": "Change NodeJS Version",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.sshTerminal",
        "title": "Start SSH session",
        "category": "DDEV",
        "icon": "$(terminal)"
      },
      {
        "command": "biatiddev.databaseTerminal",
        "title": "Start Database SSH session",
        "category": "DDEV",
        "icon": "$(terminal)"
      },
      {
        "command": "biatiddev.share",
        "title": "Share",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.shareStop",
        "title": "Stop Share",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.xdebugEnable",
        "title": "XDebug Enable",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.xdebugDisable",
        "title": "XDebug Disable",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.showDDEVOutputChannel",
        "title": "Show process information",
        "icon": "$(info)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.showTreeLoader",
        "title": "Loading",
        "icon": "$(loading~spin)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.treeChangeToAllListView",
        "title": "Toggle between all projects and workspace project",
        "icon": "$(folder-active)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.treeChangeToWorkspaceListView",
        "title": "Toggle between all projects and workspace project",
        "icon": "$(list-selection)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.treeReloadList",
        "title": "Reload List",
        "icon": "$(refresh)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.contextConfigureServices",
        "title": "Configure Services",
        "icon": "$(more)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.addService",
        "title": "Add Services",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.deleteService",
        "title": "Delete Services",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.launch",
        "title": "Open in Browser",
        "icon": "$(link-external)",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.openInBrowser",
        "title": "Open in Browser",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.deleteAllImages",
        "title": "Delete Docker images created by DDEV",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.checkForUpdates",
        "title": "Check for Updates",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.openDebugPanel",
        "title": "Open Debug Panel",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.startDockerProvider",
        "title": "Start Docker Provider",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.listProjectsToOpen",
        "title": "List DDEV Projects to Open in Editor",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.listProjectsToOpenNewWindow",
        "title": "List DDEV Projects to Open in New Editor Window",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.mutagenReset",
        "title": "Mutagen Reset",
        "category": "DDEV"
      },
      {
        "command": "biatiddev.wordpressEnableDebug",
        "title": "Enable Debug",
        "category": "DDEV WordPress",
        "enablement": "ddev:projectType == wordpress && ddev:wordPressDebugEnabled == false"
      },
      {
        "command": "biatiddev.wordpressEnableSilentDebug",
        "title": "Enable Silent Debug",
        "category": "DDEV WordPress",
        "enablement": "ddev:projectType == wordpress && ddev:wordPressSilentDebug == false"
      },
      {
        "command": "biatiddev.wordpressDisableDebug",
        "title": "Disable Debug",
        "category": "DDEV WordPress",
        "enablement": "ddev:projectType == wordpress && !ddev:wordPressSilentDebug && ddev:wordPressDebugEnabled == true"
      },
      {
        "command": "biatiddev.wordpressDisableSilentDebug",
        "title": "Disable Silent Debug",
        "category": "DDEV WordPress",
        "enablement": "ddev:projectType == wordpress && ddev:wordPressSilentDebug && ddev:wordPressDebugEnabled == true"
      },
      {
        "command": "biatiddev.wordpressOpenConfigFile",
        "title": "Open wp-config.php",
        "category": "DDEV WordPress",
        "enablement": "ddev:projectType == wordpress"
      },
      {
        "command": "biatiddev.wordpressOpenDDEVConfigFile",
        "title": "Open wp-config-ddev.php",
        "category": "DDEV WordPress",
        "enablement": "ddev:projectType == wordpress && ddev:wordPressHasDDEVConfigFile == true"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "biatiddev.treeChangeToAllListView",
          "when": "view == biatiddev && biatiddev.treeListShows == workspace",
          "group": "navigation@1"
        },
        {
          "command": "biatiddev.treeChangeToWorkspaceListView",
          "when": "view == biatiddev && biatiddev.treeListShows == all",
          "group": "navigation@1"
        },
        {
          "command": "biatiddev.addProject",
          "when": "view == biatiddev && ddev:isRunning",
          "group": "navigation@1"
        },
        {
          "command": "biatiddev.treeReloadList",
          "when": "view == biatiddev && !ddev:poweringOff",
          "group": "navigation@2"
        },
        {
          "command": "biatiddev.poweroff",
          "when": "view == biatiddev && ddev:isRunning",
          "group": "navigation@3"
        },
        {
          "command": "biatiddev.showTreeLoader",
          "when": "view == biatiddev && ddev:poweringOff",
          "group": "navigation@4"
        },
        {
          "command": "biatiddev.showDDEVOutputChannel",
          "when": "view == biatiddev && ddev:poweringOff",
          "group": "navigation@5"
        }
      ],
      "view/item/context": [
        {
          "command": "biatiddev.showDDEVOutputChannel",
          "when": "view == biatiddev && viewItem == ddev_loading || viewItem == ddev_doing_action || viewItem == ddev_starting || viewItem == ddev_restarting || viewItem == ddev_stopping || viewItem == ddev_deleting || viewItem =~ /loading$/",
          "group": "inline"
        },
        {
          "command": "biatiddev.start",
          "when": "view == biatiddev && viewItem == ddev_inactive",
          "group": "inline"
        },
        {
          "command": "biatiddev.launchInBrowser",
          "when": "view == biatiddev && viewItem == ddev_active",
          "group": "inline@1"
        },
        {
          "command": "biatiddev.sshTerminal",
          "when": "view == biatiddev && viewItem == ddev_active",
          "group": "inline@2"
        },
        {
          "command": "biatiddev.restart",
          "when": "view == biatiddev && viewItem == ddev_active",
          "group": "inline@3"
        },
        {
          "command": "biatiddev.stop",
          "when": "view == biatiddev && viewItem == ddev_active",
          "group": "inline@4"
        },
        {
          "submenu": "project_submenu",
          "when": "view == biatiddev && (viewItem == ddev_active || viewItem == ddev_inactive)",
          "group": "inline@5"
        },
        {
          "command": "biatiddev.editService",
          "when": "view == biatiddev && viewItem =~ /^ddev_edit_service/",
          "group": "inline@4"
        },
        {
          "command": "biatiddev.launch",
          "when": "view == biatiddev && viewItem == ddev_url || viewItem == ddev_launch",
          "group": "inline@2"
        },
        {
          "command": "biatiddev.revealInOS",
          "when": "view == biatiddev && viewItem == ddev_path",
          "group": "inline@2"
        },
        {
          "command": "biatiddev.openProjectInEditor",
          "when": "view == biatiddev && viewItem == ddev_path",
          "group": "inline@2"
        },
        {
          "command": "biatiddev.databaseTerminal",
          "when": "view == biatiddev && viewItem == ddev_mysql || viewItem == ddev_mariadb || viewItem == ddev_postgre",
          "group": "inline@1"
        },
        {
          "command": "biatiddev.launchDBManager",
          "when": "view == biatiddev && viewItem == ddev_mysql || viewItem == ddev_mariadb || viewItem == ddev_postgre",
          "group": "inline@2"
        }
      ],
      "project_submenu": [
        {
          "command": "biatiddev.start",
          "when": "view == biatiddev && viewItem == ddev_inactive",
          "group": "biatiddev_ga@1"
        },
        {
          "command": "biatiddev.stop",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_ga@1"
        },
        {
          "command": "biatiddev.stopOthers",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_ga@2"
        },
        {
          "command": "biatiddev.restart",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_ga@3"
        },
        {
          "command": "biatiddev.createSnapshot",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gb@1"
        },
        {
          "command": "biatiddev.restoreSnapshot",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gb@2"
        },
        {
          "command": "biatiddev.clearSnapshots",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gb@3"
        },
        {
          "command": "biatiddev.importDatabase",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gb@4"
        },
        {
          "command": "biatiddev.exportDatabase",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gb@5"
        },
        {
          "command": "biatiddev.addService",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gc@1"
        },
        {
          "command": "biatiddev.deleteService",
          "when": "viewItem == ddev_active",
          "group": "biatiddev_gc@2"
        },
        {
          "command": "biatiddev.openProjectInEditor",
          "when": "viewItem",
          "group": "biatiddev_gd@4"
        },
        {
          "command": "biatiddev.openProjectInNewEditor",
          "when": "viewItem",
          "group": "biatiddev_gd@5"
        },
        {
          "command": "biatiddev.share",
          "when": "viewItem == ddev_active && !ddev:sharing",
          "group": "biatiddev_ge@6"
        },
        {
          "command": "biatiddev.shareStop",
          "when": "viewItem == ddev_active && ddev:sharing",
          "group": "biatiddev_ge@6"
        },
        {
          "command": "biatiddev.rename",
          "when": "view == biatiddev",
          "group": "biatiddev_gf@1"
        },
        {
          "command": "biatiddev.openConfigFile",
          "when": "view == biatiddev",
          "group": "biatiddev_gf@2"
        },
        {
          "command": "biatiddev.delete",
          "group": "biatiddev_gf@100"
        }
      ],
      "commandPalette": [
        {
          "command": "biatiddev.showTreeLoader",
          "when": "false"
        },
        {
          "command": "biatiddev.treeReloadList",
          "when": "false"
        },
        {
          "command": "biatiddev.treeChangeToAllListView",
          "when": "false"
        },
        {
          "command": "biatiddev.treeChangeToWorkspaceListView",
          "when": "false"
        },
        {
          "command": "biatiddev.showDDEVOutputChannel",
          "when": "false"
        },
        {
          "command": "biatiddev.contextConfigureServices",
          "when": "false"
        },
        {
          "command": "biatiddev.editService",
          "when": "false"
        },
        {
          "command": "biatiddev.launch",
          "when": "false"
        },
        {
          "command": "biatiddev.openProjectInEditor",
          "when": "false"
        },
        {
          "command": "biatiddev.openProjectInNewEditor",
          "when": "false"
        },
        {
          "command": "biatiddev.launchInBrowser",
          "when": "false"
        }
      ]
    },
    "configuration": [
      {
        "title": "DDEV Manager",
        "properties": {
          "ddevManager.progressNotificationsDisplay": {
            "order": 4,
            "type": "string",
            "default": "Information Message",
            "enum": [
              "Information Message",
              "Status Bar"
            ],
            "description": "How some notifications with progress should be displayed. (for example for commands like start, stop, restart, power off, etc.)"
          },
          "ddevManager.showProjectsList": {
            "order": 5,
            "type": "string",
            "default": "All Projects",
            "enum": [
              "All Projects",
              "Current Workspace"
            ],
            "enumDescriptions": [
              "Display all DDEV Projects",
              "Display only the DDEV project for the current workspace, if not found the full list will be displayed"
            ],
            "description": "Choose how to display the projects list in the sidebar"
          },
          "ddevManager.projectsListNameFormat": {
            "order": 6,
            "type": "string",
            "default": "Default",
            "enum": [
              "Default",
              "Style 1",
              "Style 2",
              "Style 3"
            ],
            "enumDescriptions": [
              "awesome-project.ddev.site is displayed as awesome-project",
              "awesome-project.ddev.site is displayed as awesome project",
              "awesome-project.ddev.site is displayed as Awesome project",
              "awesome-project.ddev.site is displayed as Awesome Project"
            ],
            "description": "Choose how the project name should be displayed in the sidebar"
          },
          "ddevManager.automaticallyInstallProjectFiles": {
            "order": 7,
            "type": "boolean",
            "default": false,
            "description": "BETA: When adding a new project, the extension will attempt a fully automated installation by adding the project CMS files and executing the necessary project configurations. This feature is in beta and does not work for all project types, it will improve in the future."
          },
          "ddevManager.automaticallyConfigureWorkspacePHP": {
            "order": 8,
            "type": "boolean",
            "default": true,
            "description": "If enabled, the extension will get the PHP version configured on your DDEV project and will configure the workspace to use the same version so you can get appropriate suggestions and diagnostics. You need to install a PHP intellisen extension in order for this to work, currently it supports the following extensions: PHP Intelephense and PHP by Devsense"
          },
          "ddevManager.automaticallyConfigureDebugger": {
            "order": 9,
            "type": "boolean",
            "default": true,
            "description": "If enabled, the extension will automatically configure the launch.json and tasks.json files so XDebug is automatically enabled/disabled when step debugging is started or stopped"
          },
          "ddevManager.showServicesExpandedInSidebar": {
            "order": 10,
            "type": "boolean",
            "default": true,
            "description": "If enabled, when expanding a project in the sidebar, it's services will also expand."
          },
          "ddevManager.showUnofficialServicesAndAddons": {
            "order": 11,
            "type": "boolean",
            "default": false,
            "description": "By default only official add-ons will listed when installing a new service/add-on, to list unofficial add-ons enable this option. Please note unofficial add-ons may not be necessarily supported or tested and are maintained by the community"
          },
          "ddevManager.deleteDDEVFolder": {
            "order": 12,
            "type": "boolean",
            "default": false,
            "description": "By default, DDEV does not delete the .ddev folder upon project deletion. If this option is enabled, the .ddev folder will also be removed, while your project files remain untouched. The .ddev folder keeps the project information and database snapshots, make sure that you don't need this files and that you understand the consequences."
          },
          "ddevManager.checkForUpdates": {
            "order": 13,
            "type": "boolean",
            "default": true,
            "description": "Check for new versions of DDEV"
          }
        }
      },
      {
        "title": "Docker",
        "properties": {
          "ddevManager.dockerProvider": {
            "order": 1,
            "type": "string",
            "default": "Not configured",
            "enum": [
              "Not configured",
              "Docker Desktop",
              "Docker CE",
              "OrbStack",
              "Colima"
            ],
            "description": "Select the Docker provider you are currently using",
            "enumDescriptions": [
              "Select a valid option so DDEV Manager is able to launch the docker provider if required",
              "Docker Desktop Application.",
              "Docker CE inside WSL2 running on Ubuntu",
              "OrbStack Application. macOS only",
              "Colima macOS and Linux"
            ]
          },
          "ddevManager.colimaConfiguration": {
            "order": 2,
            "type": "string",
            "default": "--cpu=2 --memory=4",
            "description": "If you are using Colima as a Docker provider you can customize the VM"
          }
        }
      },
      {
        "title": "Database",
        "properties": {
          "ddevManager.defaultDatabaseManager": {
            "order": 3,
            "type": "string",
            "default": "Not configured",
            "enum": [
              "Not configured",
              "TablePlus",
              "Sequel Ace",
              "Querious",
              "Sequel Pro",
              "DBeaver",
              "phpMyAdmin",
              "Adminer",
              "VS Code Extension: Database Client"
            ],
            "description": "Select the database manager you want to use",
            "enumDescriptions": [
              "Select a valid option to be able to open the database directly with DDEV Manager",
              "Requires TablePlus app. Available for Mac and Windows",
              "Requires Sequel Ace app. Available for Mac Only",
              "Requires Querious app. Available for Mac Only",
              "Requires Sequel Pro. Available for Mac Only",
              "Requires DBeaver Available for Windows, Mac and Linux",
              "Requires phpMyAdmin service. If the service is still not installed the extension will give you the option to install it",
              "Requires Adminer service. If the service is still not installed the extension will give you the option to install it",
              "Requires Database Client VS Code extension."
            ]
          },
          "ddevManager.createSnapshotOnProjectStop": {
            "order": 11,
            "type": "boolean",
            "default": false,
            "description": "Automatically create a database snapshot when stopping a project, This serves as a precautionary measure in the event that your containers become corrupted or destroyed. Database snapshots are stored inside the .ddev folder"
          },
          "ddevManager.omitSnapshotOnProjectDelete": {
            "order": 12,
            "type": "boolean",
            "default": false,
            "description": "When deleteing a project, by default DDEV creates a final snapshot of the database, if this option is enabled, snapshots will not be created."
          }
        }
      },
      {
        "title": "WordPress",
        "properties": {
          "ddevManager.wordpress.updateTablePrefixAfterDatabaseImport": {
            "order": 15,
            "type": "string",
            "default": "Ask",
            "enum": [
              "Ask",
              "Always",
              "Never"
            ],
            "enumDescriptions": [
              "After database import if the table prefix is different ask if i want to update it",
              "After database import if the table prefix is different automatically update it to match DDEV",
              "Do nothing, don't update the database tables prefix"
            ]
          },
          "ddevManager.wordpress.updateURLAfterDatabaseImport": {
            "order": 16,
            "type": "string",
            "default": "Ask",
            "enum": [
              "Ask",
              "Always",
              "Never"
            ],
            "enumDescriptions": [
              "After database import if the URL is different from the DDEV project ask if i want to update it",
              "After database import if the URL is different from the DDEV project automatically update it to use the DDEV project URL",
              "Do nothing, don't update the URL's in the database"
            ]
          }
        }
      }
    ],
    "terminal": {
      "profiles": [
        {
          "icon": "$(code)",
          "id": "biatiddev.sshterminalProvider",
          "title": "DDEV SSH"
        }
      ]
    },
    "breakpoints": [
      {
        "language": "php"
      }
    ],
    "taskDefinitions": [
      {
        "type": "ddev",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "description": "The command to run on the container"
          },
          "options": {
            "type": "object",
            "properties": {
              "dir": {
                "type": "string",
                "description": "The directory inside the Docker container where the command will run"
              },
              "project": {
                "type": "string",
                "description": "The project ID where you want to run the command, defaults to the current project in workspace"
              },
              "sudo": {
                "type": "boolean",
                "description": "Whether to run the command with sudo"
              },
              "raw": {
                "type": "boolean",
                "description": "If true, the command will be executed directly instead of being interpreted by Bash. Please note that if it's set to true, you cannot use environment variables, pipes, redirection, etc."
              }
            },
            "description": "Additional options to pass to the command"
          }
        }
      }
    ],
    "debuggers": [
      {
        "type": "ddev-php",
        "label": "DDEV Debug",
        "configurationSnippets": [
          {
            "label": "DDEV Listen for Xdebug",
            "description": "DDEV configuration for launching Xdebug",
            "body": {
              "name": "Listen for Xdebug",
              "type": "php",
              "request": "launch",
              "hostname": "0.0.0.0",
              "port": 9003,
              "pathMappings": {
                "/var/www/html": "^\"\\${workspaceFolder}\""
              },
              "preLaunchTask": "DDEV: Enable Xdebug",
              "postDebugTask": "DDEV: Disable Xdebug"
            }
          }
        ]
      }
    ]
  },
  "capabilities": {
    "virtualWorkspaces": false,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "scripts": {
    "postinstall": "npx patch-package",
    "prepare": "patch-package",
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "vscode:package": "vsce package",
    "vscode:publish": "vsce publish",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/lodash-es": "^4.17.9",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.5.0",
    "@types/vscode": "^1.70.0",
    "@typescript-eslint/eslint-plugin": "^6.3.0",
    "@typescript-eslint/parser": "^6.3.0",
    "@vscode/test-electron": "^2.1.5",
    "copy-webpack-plugin": "^11.0.0",
    "eslint": "^8.20.0",
    "glob": "^10.3.3",
    "mocha": "^10.0.0",
    "patch-package": "^8.0.0",
    "ts-loader": "^9.3.1",
    "typescript": "^5.1.6",
    "webpack": "^5.74.0",
    "webpack-cli": "^5.1.4",
    "webpack-node-externals": "^3.0.0",
    "webpack-shell-plugin-next": "^2.3.1"
  },
  "dependencies": {
    "@vscode/webview-ui-toolkit": "^1.2.1",
    "compare-versions": "^6.1.0",
    "croner": "^7.0.1",
    "lodash-es": "^4.17.21",
    "node-fetch": "^3.3.2",
    "open": "^9.1.0",
    "rxjs": "^7.8.0",
    "ws": "^8.13.0",
    "yaml": "^2.2.1"
  }
}